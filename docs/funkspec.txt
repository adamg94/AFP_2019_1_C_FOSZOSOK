Funkcionális Specifikáció
-------------------------

1. A rendszer céljai és nem céljai


2. Jelenlegi helyzet


3. Vágyálomrendszer


Szerző: Gulyás Ádám
A funkcionális specifikációban úgy tárgyaljuk át a vágyálomrendszert, hogy az egyes elvárásokat, követelményeket a felhasználó szemszöge szerint vizsgáljuk meg, pontosan átbeszéljük a megrendelővel, hogy hogyan is működjön a rendszer, mi hogyan nézzen ki, s a későbbiekben meghatározni a használati eseteket.
Az applikáció a Javascript nyelvre épülő NodeJS keretrendszerrel fog elkészülni, mely a Javascript-ből egy általános felhasználású scriptnyelvet konstruál, így hasonlóan a Python nyelvhez megtehetünk benne majdnem mindent. A NodeJS-t alapvetően webes használathoz tervezték, de elterjedtségének köszönhetően ma már számos más területen is előre nyomul. Az applikációt az Electron nevezetű szabad keretrendszerrel készítjük el, mely asztali környezetben egy Chromium motoron futtatja a HTML + CSS + JS kódokat, de a végeredmény egy asztali alkalmazás. (Hasonló alkalmazások: Discord, VS Code, Slack… stb)
A megrendelő megérti, hogy e technológiával a későbbiekben egyszerű lesz a weben is futtatni, kisebb módosításokkal, így elfogadja ezt. A NodeJS platformfüggetlen, így természetesen Linux és MacOSX-en is futtatható.
Felhasználói felület: A megrendelő úgy gondolta, hogy a bejelentkező ablakon egy felhasználói név, jelszó és egy gomb lesz található, mely abban az esetben, ha a felhasználó még nem létezik, automatikusan létrehozza azt. Vezető designerünk felvetette az ötletét az elrendezéseknek. A megrendelő több lehetséges változatot is kapott. Egyfelől a bejelentkező oldal háttere minden esetben a játékról készült kép lenne, előtérben a beviteli mezőkkel. A háttér kicsit elhomályosítva, a mezők középre rendezve. Egy másik lehetséges megoldás egy bal/jobb oldalt az ablak magasságával megegyező boksz, ami kb 10% széles itt lenne található a bejelentkezés, a maradék 90%-a az ablaknak pedig a kép lenne a játékról. A megrendelőnek ez utóbbi tetszett.
Játék index oldal: Bejelentkezést/regisztrációt követően egyből egy kezdő faluba dobna a rendszer, a grafikusan megjelenített falu befoglalná a terület 90%-át középen, balra rendezve. Felül  egy menüsor lenne, ahol az egyes épületeket érheti el a felhasználó, illetve saját profilbeállítását, pl. jelszócsere.
A falunézet mellett lenne két doboz még, az egyikben a jelenleg rendelkezésre álló nyersanyagok, alatta pedig a termelési információk (milyen nyersanyagot milyen gyorsasággal termel)
Felhasználói élmény javítása érdekében a nyersanyag kijelzése történhetne egy kliensoldali scripttel, mely mindig frissítené az éppen elérhető mennyiségű nyersanyagokat.
Programozói megjegyzés: valójában nem frissítés lenne, hiszen ha percenként kapna pl. 1 fát, az azt jelentené, hogy percenként kellene az adatbázist frissíteni. A kijelzés ezért csak vizuális lenne, nem valós adatlekérés. A rendszer úgy működne, hogy egy script elosztja minden percre, hogy hány darab egységet kell kapjon a felhasználó, de nem frissíti az adatbázisban. Úgy működne, hogy az előzőleg elindított építkezésnél le kell menteni az akkor éppen aktuális mennyiségű nyersanyagot és az akkori dátumot, majd ha a felhasználó szeretne valamit fejleszteni, akkor a rendszer megvizsgálja, hogy mennyi idő telt el azóta, ez alatt az idő alatt mennyi nyersanyagot kellett, hogy kapjon, ezt hozzáadja ahhoz ami alapból volt neki a mentésből, s ha ez elegendő, akkor a fejlesztés indulhat. Tehát leegyszerűsítve a nyersanyag termelését és az aktuális mennyiséget nem úgy kell elmenteni, hogy percenként terheljük az adatbázist. A kliensoldalon lévő script reprezentálja, hogy ha ez a valóságban így történne, akkor mennyi nyersanyagunk lenne. Ezt át beszéltük a többi programozóval, nekik is ez a megoldás a kézenfekvő.
Falunézet: A falunézetet úgy kell kialakítani, hogy az a felhasználónak egyszerű és gyorsan kezelhető legyen. Felmerült egyik kollégánk ötlete, hogy a szinteket egy kis feliratbox-ba megjeleníthetnénk az épületek mellett. A megrendelőnek nagyon tetszett az ötlet, továbbá ez segíti a felhasználót is a tájékozódásban. Az egyes épületekre egérrel is rá lehetne kattintani, nem csak a felső menüsorból, így vizualizálva mintha egy virtuális faluban lenne a felhasználó.
Épületek nézetei: A megrendelő itt szavunkba vágott és felvetette saját ötleteit, amit a régről ismert. Az épületnézetnél lenne egy leírás az adott épületről, hogy mire való pontosan. Ki lenne jelezve annak neve, szintje és képe. Ezen kívül az oldal többi részén természetesen az adott épület funkcióját meg kell valósítani, melyet a megrendelő az alábbiakban határozott meg:
Palota: Egy faszerkezetű kialakítás. A játékos egy 1-es szintű palotával, 1-es szintű termelőkkel, 1-es szintű raktárral kezd. Ilyen szinten nem tud még mindent elkezdeni így egy faszerkezet jelölhetné, reprezentálhatná, hogy az adott épülethez mit kell megépíteni ahhoz, hogy használhassa. A palota épületnézetét úgy képzeli el, hogy két fül van, az egyiken az előbb említett faszerkezet, a másikon pedig egy táblázat az épületekről, azok költségeiről és a fejlesztés lehetőségéről.
Egyik programozónk rákérdez, hogy tulajdonképpen hogy működik az épületfejlesztés? A megrendelő  statálja, hogy minden épületnek van építési ideje, mely akár órákig is tarthat. Itt egyből felmerült bennünk néhány kérdés.
Az építések csak „online” idő alatt mennek, vagy „offline” is? Azaz, ha a játék épp nem fut, vagy fut. A megrendelő egyértelműen jelezte, hogy ilyen téren „online” szeretné futtatni.
Programozói megjegyzés: Ezt meglehet úgy oldani, hogy egy központi szerverről lekérdezzük az időt mindig, amikor egy épület fejlesztése elkezdődik, majd ha újra belép, akkor pedig megnézzük, hogy volt-e fejlesztés és az újonnan lekért idő alapján eltelt-e annyi, amennyi szükséges. Az időt mindenképpen egy megbízható szerverről kell lekérdezni, hiszen az OS idejét a felhasználó kedve szerint változtathatja.
Egy másik kérdés volt, hogy lehessen-e építési sort létrehozni. A megrendelő igennel válaszolt, egyszerre 3 épület építését lehetne sorba tenni.
Lebontási lehetőség? A megrendelő szeretné, ha lenne egy Lebontás fül is, ahol lebonthatnánk az épületeket. Ezek valamivel kevesebb ideig tartanak és visszaadnak valamennyi nyersanyagot, amit meg lehetett menteni. (kb 40-50%-át a szintnek)
Kereskedő ház és kereskedő műhely: A megrendelő a kereskedő házat úgy írta le, hogy 1:1 arányban tudnánk cserélni nyersanyagot a számítógéppel, de ezek a cserék időbe telnének. Az időt a piac szintje csökkentené, illetve több kereskedőnk lehetne. Több kereskedő azt jelenti, hogy több nyersanyagot vihet magával. Vezető programozónk rákérdezett, hogy hogy képzeli el a korábban említett különleges ércek cseréjét. A megrendelő azt mondta, hogy a három alap nyersanyag cseréje 1:1 arányban kell, hogy működjön. Fémet csak 0.50:1 arányban tudnánk cserélni, Követ úgyszintén. Rezet 0.30:1, ezüstöt 0.20:1, s aranyat 0.10:1 arányban. Ezen arányok azt jelentik, hogy ha pl. 100 aranyam van, akkor azért kaphatok 1000 vasat/agyagot/fát. Ugyanakkor a különleges ércek egymás közötti cseréjét is szeretné. Rezet ezüsttért 0.7:1 arányban lehetne, réz és arany aránya 0.4:1, míg arany és ezüst aránya 0.5:1
Programozói kérdések? Hogyan képzeli el a cserét és mi a haszna a kereskedő műhelynek, ha a kereskedők száma a kereskedőház növelésével nő, amivel nő a kapacitás.
A megrendelő a cserét úgy vázolta, hogy lenne egy táblázat ahol be tudná írni a felhasználó a megfelelő helyre, hogy mit és mire szeretne cserélni. A rendszer pedig megjelenítené az arányokat.
A műhelyre azt válaszolta, hogy a kereskedők fixen 2000 egységet tudnak magukkal vinni összesen, de a szekér további maximum 75%-ot adna ehhez hozzá, a maximum szinten.
Templom: A templom úgy működne, hogy lenne benne egy csúszka ami jelölné a jelenlegi jólétet százalékos értékben. Ha ez a szám 75% fölötti, az azt jelenti, hogy különböző bónuszokat kapunk, ha ez alatti akkor minden normális, 50% alatt pedig lassító mechanizmusok lennének, lassab építkezés, drágább építkezés. Miséket lehetne tartani melyek több órásak így egy nap csak ritkán lehetne tartani. A templom szintjének növelése csökkentené a misék idejét, ugyanakkor a miséért járó jólét pontok nem lennének többek, csupán sűrűbben tudnánk őket megszervezni. Ha 30% alatt van a jólét, minden 3x olyan lassú és drága. A jólét 90% fölött fejti ki legnagyobb hatását, minden építkezés és termelés 25%-kal javul.
Fal: Nincs szerepe, csak vizuális megjelenés. 
Nyersanyag raktár: A különleges érceket is itt tárolnánk, de ezekből jóval kevesebb férhet el majd egységenként. A raktár növelésével nőne az elraktározható mennyiség.
Rejtekhely: Nem minősül raktárnak, csupán egy bizonyos mennyiséget megvéd minden esetben ha támadás érné a falut. Jelenlegi formájában nem tudná funkcióját érvényesíteni. Ha pl. 500 egységet képes megvédeni, akkor a fosztogatok nem tudnak a raktárból 500 alá lopni magukat nyersanyagonként. A rejtekhely fejlesztésével a 20. szinten lehetőség van kincs elásására, ami egy bonyolultabb nyersanyagvédés lenne. A kincs elásását a különleges ércekkel lehetne csak. Minél nagyobb a rejtekhely szintje annál többet tudna a láda tárolni. Egyszerre csak 1 ládát lehetne elásni és az ott maradhatna örökkön örökké. Az ásásnak és a kiásásnak is van ideje.
Szobor: Csak akkor épülhessen meg, ha már minden más felépült. Megépülése esetén minden nyersanyagtermelés 15%-kal jobb és a nyersanyagraktár, a rejtekhely összes kapacitása is 20%-kal több lesz. Ezeken kívül még mást is csinálna, de a megrendelő kikötötte, hogy ez egy későbbi fejlesztés.
Nemesfémkohó: Itt tudnánk megmunkálni a megtermelt agyag és vasat. A megmunkálás időt vesz igénybe cserébe az így kapott fém és kő összességében többet ér, mint a sima vas és agyag. Az agyagot fém-re tudnánk oda-vissza cserélni 0.4:1 arányban.
Programozói megjegyzés: Aránytáblázat létrehozása a jobb áttekinthetőség kedvéért.
A felhasználót nagyban segítené egy ilyen táblázat.
Malom: Ha óránként pl. 1500 búza termelődik, de a malom ennek csak az 5%-át képes feldolgozni. Ez 75. Ennyi embert tudna foglalkoztatni. Mit jelent a foglalkoztatás? Az épületek minél magasabb szintűek, annál több embert igényelnek, de ennek a mechanikának később lenne jelentősége a megrendelő szerint, amikor esetleges egységek is szóba jöhetnének. A malom szintjének növelése növeli a feldogozás mértékét.
Búzamező: Mennyi búzát termel óránként, fejlesztésével növelhető e összeg. Eleinte nagyon kevés búza termelődik, kb. 100 óránként ez 5 embert jelent egy egyes szintű malommal. A malom fejlesztése kézenfekvőbb ezekben az esetekben, de ez egy felhasználói stratégia.
Érctermelő: Az érctermelővel kapcsolatban nincs különösebb tárgyalás a megrendelő részéről. A felhasználó felé. Vasat termel óránként. Minden megtermelt óra után nő az esélye különleges ércek találásának is. Minél több idő telt el, annál több lesz az esély. Minden órában lefutna egy függvény ami megpróbálna találni valamennyi különleges ércet. Ha nem sikerül, tovább nő az esély a következő órára. Így a rendszer úgy lesz megalkotva, hogy egy bizonyos idő után biztosan kapjon különleges ércet a játékos. A 30. szinttől láthatóvá válik a jelenlegi esély egy különleges ércre, majd minden további 5. szintnél még több különleges érc esélyei láthatóvá válnak.
Agyag és Fa termelés: Szintén semmi egyéb változás a követelmény specifikáció óta.

Interjúnkat itt zárjuk a megrendelővel. A megrendelő közli, hogy szeretné, hogyha bármit meggondol, akkor a fejlesztés során ezt jelezhesse. A programozók ezt tudomásul veszik.


4. Jelenlegi üzleti folyamatok modellje
A webes stratégiai jétékok igen népszerűek még manapság is, viszont rengetek pay-to-win funkció van bennük, ami rengeteg embert frusztrál és elveszi a kedvüket egy idő után. Ahogy azt sokan látják szükség lenne a piacnak, egy hasonló játékra, amely nem engedi meg, hogy a fizető játékosok behozhatatlan előnyre tegyenek szert. Sajnos ezek az elemek nem csak az ilyen típusú játékokban léteznek, hanem rengeteg ingyenes játékban és néhány fizetősben is, ami lássuk be elég kiábrándító. Azok akik nem tehetik meg, vagy egyszerűen nem szeretnék megtenni, hogy fizessenek egy ilyen játékba, hamar otthagyják azt, vagy vannak akik el se kezdik. Továbbá ezekben a böngészős játékokban ugyanúgy jelen vannak a reklámfelületek is, tehát akkor is rengeteget keresnének a játékosokon, ha azok nem fizetnének a fizetős funkciókért. Sok játékfejlesztő vette észre ezt a "piaci rést" és úgy gondolták tovább, hogy a fizetős funkciók csak olyan "előnyhöz" juttassák a játékosokat, amelyek nem jelentenek tényleges előnyt. A legáltalánosabb ezek közül a különböző kinézetek árulása, amitől vagányabbnak érzi magát az ember, de semmivel se lesz jobb tőle. Divatos még manapság az úgy nevezett battle pass, aminek a lényege, hogy egy bizonyos összeg befizetése után szinteket léphet a pass és, ha sokat játszik az adott ember, akkor a befizetett összeg többszöröséért kap vizuális jutalmakat. A több éves tapasztalat azt mutatja, hogy az ilyen játékokkal az emberek szívesebben játszanak akár több évet is, ha abban elég tartalom van, valamint emiatt szívesebben vesznek 1-2 kinézet tudván, hogy úgyis sokáig játszanak majd még a játékkal. A megrendelő ezeket az indokokat vázolva keresett meg minket, és szeretne egy a már említett böngészős stratégiai játékokból ismert város fejlesztő játékot készíttetni. Szeretné elkerülni a pay-to-win elemeket ezáltal megtartva a játékosait hosszabb időre. A város fejlesztős játék első verziójában még nem szeretné, hogy kinézeteket tegyünk, szeretné átlátni az egyes funkciók működését. Külön kiemelte, hogy neki nagy szenvedélyei közé tartoznak az ilyen játékok és szeretné, ha egy olyan játék jönne létre, ami megfelel egy új és egy veterán játékos igényeinek is.

5. Igényelt üzleti folyamatok modellje


A belépési rendszer megvalósítása:
Ha a felhasználó egy olyan nevet ad meg, ami nem szerepel az adatbázisban,
akkor azt automatikusan regisztrálja a rendszer, amennyiben az megfelel a követelményeknek.
Ezen követelmények egybe értendőek a jelszó követelményeivel.
Amennyiben a felhasználónév létezik, a rendszer ellenőrzi a jelszót,
s ezt követően a játékba dobja a felhasználót.

Start rendszerek: A játék offline módban nem működik,
a fejlesztések leállnak, a nyersanyagok cseréje úgy szintén.
Azonban a megrendelő szeretné, ha ekkor sem állnának le.
Ezt úgy lehet elérni, ha minden interakció során az adatbáziba elmentjük azt az időt, amikor
az adott interakció elkezdődött, elmentjük mellé az időt, ami szükséges a folyamat
végrehajtásához, regisztrálunk egy eseményt a passzív rendszerbe, ami majd élesedik akkor, amikor a folyamat véget ért,
vagy ha az offline módban van, akkor nem tud aktiválódni. Ezért a start folyamat során lekérjük az időt egy NTP szerverről,
s kiszámoljuk, hogy az interakciók befejeződtek-e már, vagy még nem, de már haladtak.
Az időt azért kell NTP szerverről lekérni, mert a játék localhost módban fut, a mögötte lévő
localhost server pedig az OS rendszeridejét venné alapúl, így a játékos manipulálhatná azt.
Az aktív rendszerek kiváltanak egy esményt, amit a passzív rendszer háttérfolyamati kezelnek,
majd ha szükséges az adatbázist frissítik. 
Modell: lásd Pictures/Funk.Spec. - Igenyelt Uzleti Folyamatok modellje.png


6. Követelménylista


7. Használati esetek

Egy szerepkör lesz elérhető az eddigiek megbeszélt alapján, ezt hívjuk játékosnak.
-Regisztráció: a játékos akadálymentesen regisztrálhat.
-Bejelentkezés: be tud jelentkezni, ha már regisztrált.
-Profil: a profilját megtekintheti, módosíthatja adatait.

Épületek:
-Menüpontok kezelése: a menüpontokat kedve szerint böngészheti és olvashatja azok összes tartalmát.
-Építkezés indítása: a falujában még meg nem épített épület megépítését elindíthatja.
-Épület szintjének növelése: ha már a faluja tartalmazza az épületet, és ha az adott épület még nem érte el a maximum szintjét akkor a megfelelő nyersanyag mennyiség befektetésével elindíthatja a folyamatot.
-Épület lerombolása: ha úgy dönt, hogy már nincs szüksége egy épületre lerombolhatja azt, növelve az épület értékének egy részével a nyersanyagait.
-Épület funkciójának használata: az egyes épületek saját funkcióit használhatja.

Lásd: haszalat.png

8. Képernyőtervek


9. Funkció -> Követelmény: Megfeleltetés


10. Fogalomszótár